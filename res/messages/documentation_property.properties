#common
property.common.languages=<p>A space separated list of language names, telling Setup to which languages the entry belongs. If the end user selects a language from this list, the entry is processed (for example: the file is installed).</p>\
                           <p>An entry without a <tt>Languages</tt> parameter is always processed, unless other parameters say it shouldn't be.</p>\
                           <p>Besides space separated lists, you may also use boolean expressions. See <a href="topic_componentstasksparams.htm">Components and Tasks parameters</a> for examples of boolean expressions.</p>\
                           <div class="examplebox">\
                           <div class="exampleheader">Example:</div>\
                           <pre class="nomargin">Languages: en nl</pre>\
                           </div>
property.common.min_version=<p>A minimum <a href="topic_winvernotes.htm">Windows version</a> for the entry to be processed. If you use "0" then the entry will never be processed. <a href="topic_buildnumnotes.htm">Build numbers and/or service pack levels</a> may be included. This overrides any <tt>MinVersion</tt> directive in the script's <tt>[Setup]</tt> section.</p>\
                             <p>An entry without a <tt>MinVersion</tt> parameter is always processed, unless other parameters say it shouldn't be.</p>\
                             <p>For compatibility with previous versions of Inno Setup, separate Windows 95/98/Me and Windows NT version numbers may be specified, separated by a comma. Example: <tt>4.1,5.0</tt>. The Windows 95/98/Me version number (the first number) isn't used, however, as Inno Setup no longer supports Windows 95/98/Me.</p>\
                             <div class="examplebox">\
                             <div class="exampleheader">Example:</div>\
                             <pre class="nomargin">MinVersion: 5.1</pre>\
                             </div>
property.common.only_below_version=<p>Essentially the opposite of <tt>MinVersion</tt>. Specifies the minimum <a href="topic_winvernotes.htm">Windows version</a> for the entry <i>not</i> to be processed. For example, if you put <tt>6.0</tt> and the user is running Windows 2000 or XP, the entry <i>will</i> be processed, but if the user is running Windows Vista (which reports its version as 6.0) or later, it will <i>not</i> be processed. Putting "0" means there is no upper version limit. <a href="topic_buildnumnotes.htm">Build numbers and/or service pack levels</a> may be included. This overrides any <tt>OnlyBelowVersion</tt> directive in the script's <tt>[Setup]</tt> section.</p>\
                                    <p>An entry without an <tt>OnlyBelowVersion</tt> parameter is always processed, unless other parameters say it shouldn't be.</p>\
                                    <p>For compatibility with previous versions of Inno Setup, separate Windows 95/98/Me and Windows NT version numbers may be specified, separated by a comma. Example: <tt>4.1,5.0</tt>. The Windows 95/98/Me version number (the first number) isn't used, however, as Inno Setup no longer supports Windows 95/98/Me.</p>\
                                    <div class="examplebox">\
                                    <div class="exampleheader">Example:</div>\
                                    <pre class="nomargin">OnlyBelowVersion: 6.0</pre>\
                                    </div>
#components & tasks
property.common.components=<p>A space separated list of components this task belongs to. If the end user selects a component from this list, this task will be shown. A task entry without a Components parameter is always shown.</p>\
                           <div class="examplebox">\
                           <div class="exampleheader">Example:</div>\
                           <pre class="nomargin">Components: main</pre>\
                           </div>
property.common.tasks=<p>A space separated list of task names, telling Setup to which task the entry belongs. If the end user selects a task from this list, the entry is processed (for example: the file is installed).</p>\
                       <p>An entry without a <tt>Tasks</tt> parameter is always processed, unless other parameters say it shouldn't be.</p>\
                       <p>Note that the <i>Don't create a Start Menu folder</i> checkbox on the <i>Select Start Menu Folder</i> wizard page doesn't affect [Icons] entries that have <tt>Tasks</tt> parameters since they have their own checkboxes.</p>\
                       <div class="examplebox">\
                       <div class="exampleheader">Example:</div>\
                       <pre class="nomargin">\
                       [Icons]\
                       Name: "{group}\\My Program"; Filename: "{app}\\MyProg.exe"; Components: main; Tasks: startmenu\
                       Name: "{group}\\My Program Help"; Filename: "{app}\\MyProg.chm"; Components: help; Tasks: startmenu\
                       Name: "{commondesktop}\\My Program"; Filename: "{app}\\MyProg.exe"; Components: main; Tasks: desktopicon\
                       </pre>\
                       </div>
#special
property.types.name=<b>Required</b><br/><p>The internal name of the type. Used as parameter for components in the [Components] section to instruct Setup to which types a component belongs.</p>\
                                        <div class="examplebox">\
                                        <div class="exampleheader">Example:</div>\
                                        <pre class="nomargin">Name: "full"</pre>\
                                        </div>
property.types.description=<b>Required</b><br/><p>The description of the type, which can include constants. This description is shown during installation.</p>\
                                               <div class="examplebox">\
                                               <div class="exampleheader">Example:</div>\
                                               <pre class="nomargin">Description: "Full installation"</pre>\
                                               </div>
property.types.flags=This parameter is a set of extra options. Multiple options may be used by separating them by spaces.
property.components.name=<b>Required</b><br/><p>The internal name of the component.</p>\
                                              <p>The total number of \\ or / characters in the name of the component is called the level of the component. Any component with a level of 1 or more is a child component. The component listed before the child component with a level of 1 less than the child component, is the parent component. Other components with the same parent component as the child component are sibling components.</p>\
                                              <p>A child component can't be selected if its parent component isn't selected. A parent component can't be selected if none of its children are selected, unless a <tt>Components</tt> parameter directly references the parent component or the parent component includes the <tt>checkablealone</tt> flag.</p>\
                                              <p>If sibling components have the <tt>exclusive</tt> flag, only one of them can be selected.</p>\
                                              <div class="examplebox">\
                                              <div class="exampleheader">Example:</div>\
                                              <pre class="nomargin">Name: "help"</pre>\
                                              </div>
property.components.description=<b>Required</b><br/><p>The description of the component, which can include constants. This description is shown to the end user during installation.</p>\
                                                     <div class="examplebox">\
                                                     <div class="exampleheader">Example:</div>\
                                                     <pre class="nomargin">Description: "Help Files"</pre>\
                                                     </div>
property.components.types=<p>A space separated list of types this component belongs to. If the end user selects a type from this list, this component will be installed.</p>\
                           <p>If the <tt>fixed</tt> flag isn't used (see below), any custom types (types using the <tt>iscustom</tt> flag) in this list are ignored by Setup.</p>\
                           <div class="examplebox">\
                           <div class="exampleheader">Example:</div>\
                           <pre class="nomargin">Types: full compact</pre>\
                           </div>
property.components.extra_disk_space_required=<p>The extra disk space required by this component, similar to the <a href="topic_setup_extradiskspacerequired.htm">ExtraDiskSpaceRequired</a> directive for the [Setup] section.</p>\
                                               <div class="examplebox">\
                                               <div class="exampleheader">Example:</div>\
                                               <pre class="nomargin">ExtraDiskSpaceRequired: 0</pre>\
                                               </div>
property.components.flags=This parameter is a set of extra options. Multiple options may be used by separating them by spaces.
property.tasks.name=<b>Required</b><br/><p>The internal name of the task.</p>\
                                         <p>The total number of \\ or / characters in the name of the task is called the level of the task. Any task with a level of 1 or more is a child task. The task listed before the child task with a level of 1 less than the child task, is the parent task. Other tasks with the same parent task as the child task are sibling tasks.</p>\
                                         <p>A child task can't be selected if its parent task isn't selected. A parent task can't be selected if none of its children are selected, unless a <tt>Tasks</tt> parameter directly references the parent task or the parent task includes the <tt>checkablealone</tt> flag.</p>\
                                         <p>If sibling tasks have the <tt>exclusive</tt> flag, only one of them can be selected.</p>\
                                         <div class="examplebox">\
                                         <div class="exampleheader">Example:</div>\
                                         <pre class="nomargin">Name: "desktopicon"</pre>\
                                         </div>
property.tasks.description=<b>Required</b><br/><p>The description of the task, which can include constants. This description is shown to the end user during installation.</p>\
                                                <div class="examplebox">\
                                                <div class="exampleheader">Example:</div>\
                                                <pre class="nomargin">Description: "Create a &amp;desktop icon"</pre>\
                                                </div>
property.tasks.group_description=<p>The group description of a group of tasks, which can include constants. Consecutive tasks with the same group description will be grouped below a text label. The text label shows the group description.</p>\
                                  <div class="examplebox">\
                                  <div class="exampleheader">Example:</div>\
                                  <pre class="nomargin">GroupDescription: "Additional icons"</pre>\
                                  </div>
property.tasks.flags=This parameter is a set of extra options. Multiple options may be used by separating them by spaces.
property.files.source=<b>Required</b><br/><p>The name of the <i>source file</i>. The compiler will prepend the path of your installation's <a href="topic_sourcedirectorynotes.htm">source directory</a> if you do not specify a fully qualified pathname.</p>\
                                           <p>This can be a wildcard to specify a group of files in a single entry. When a wildcard is used, all files matching it use the same options.</p>\
                                           <p>When the flag <tt>external</tt> is specified, <tt>Source</tt> must be the full pathname of an existing file (or wildcard) on the distribution media or the user's system (e.g. "{src}\\license.ini").</p>\
                                           <p>Constants may only be used when the <tt>external</tt> flag is specified, because the compiler does not do any constant translating itself.</p>\
                                           <div class="examplebox">\
                                           <div class="exampleheader">Examples:</div>\
                                           <pre class="nomargin">\
                                           Source: "MYPROG.EXE"\
                                           Source: "Files\\*"\
                                           </pre>\
                                           </div>
property.files.dest_dir=<b>Required</b><br/><p>The directory where the file is to be installed on the user's system. Will almost always begin with one of the directory constants. If the specified path does not already exist on the user's system, it will be created automatically, and removed automatically during uninstallation if empty.</p>\
                         <div class="examplebox">\
                         <div class="exampleheader">Examples:</div>\
                         <pre class="nomargin">\
                         DestDir: "{app}"\
                         DestDir: "{app}\\subdir"\
                         </pre>\
                         </div>
property.files.dest_name=<p>This parameter specifies a new name for the file when it is installed on the user's system. By default, Setup uses the name from the <tt>Source</tt> parameter, so in most cases it's not necessary to specify this parameter.</p>\
                          <div class="examplebox">\
                          <div class="exampleheader">Example:</div>\
                          <pre class="nomargin">DestName: "MYPROG2.EXE"</pre>\
                          </div>
property.files.excludes=<p>Specifies a list of patterns to exclude, separated by commas. This parameter cannot be combined with the <tt>external</tt> flag.</p>\
                         <p>Patterns may include wildcard characters ("*" and "?"). Note that unlike the <tt>Source</tt> parameter, a simple Unix-style pattern matching routine is used for <tt>Excludes</tt>. Dots in the pattern are always significant, thus "*.*" will not exclude a file with no extension (instead, use just "*"). Also, question marks always match exactly one character, thus "?????" will not exclude files with names less than five characters long.</p>\
                         <p>If a pattern starts with a backslash ("\\") it is matched against the start of a path name, otherwise it is matched against the end of a path name. Thus "\\foo" will only exclude a file named "foo" at the base of the tree. On the other hand, "foo" will exclude any file named "foo" anywhere in the tree.</p>\
                         <p>The patterns may include backslashes. "foo\\bar" will exclude both "foo\\bar" and "subdir\\foo\\bar". "\\foo\\bar" will only exclude "foo\\bar".</p>\
                         <div class="examplebox">\
                         <div class="exampleheader">Examples:</div>\
                         <pre class="nomargin">\
                         Source: "*"; Excludes: "*.~*"\
                         Source: "*"; Excludes: "*.~*,\\Temp\\*"; Flags: recursesubdirs\
                         </pre>\
                         </div>
property.files.external_size=<p>This parameter must be combined with the <tt>external</tt> flag and specifies the size of the external file in bytes. If this parameter is not specified, Setup retrieves the file size at startup. Primarily useful for files that aren't available at startup, for example files located on a second disk when <a href="topic_setup_diskspanning.htm">disk spanning</a> is being used.</p>\
                               <div class="examplebox">\
                               <div class="exampleheader">Example:</div>\
                               <pre class="nomargin">\
                               ExternalSize: 1048576; Flags: external\
                               </pre>\
                               </div>
property.files.copy_mode=<p>You should not use this parameter in any new scripts. This parameter was deprecated and replaced by flags in Inno Setup 3.0.5:</p>\
                           <p>\
                           <tt>CopyMode: normal -&gt; Flags: promptifolder</tt><br/>\
                           <tt>CopyMode: alwaysskipifsameorolder -&gt; </tt>no flags<br/>\
                           <tt>CopyMode: onlyifdoesntexist -&gt; Flags: onlyifdoesntexist</tt><br/>\
                           <tt>CopyMode: alwaysoverwrite -&gt; Flags: ignoreversion</tt><br/>\
                           <tt>CopyMode: dontcopy -&gt; Flags: dontcopy</tt>\
                           </p>\
                           <p>What was <tt>CopyMode: alwaysskipifsameorolder</tt> is now the default behavior. (The previous default was <tt>CopyMode: normal</tt>.)</p>
property.files.attribs=<p>Specifies additional attributes for the file. This can include one or more of the following: <tt>readonly</tt>, <tt>hidden</tt>, <tt>system</tt>. If this parameter is not specified, Setup does not assign any special attributes to the file.</p>\
                         <div class="examplebox">\
                         <div class="exampleheader">Example:</div>\
                         <pre class="nomargin">Attribs: hidden system</pre>\
                         </div>
property.files.permissions=<p>Specifies additional permissions to grant in the file's ACL (access control list). It is not recommended that you use this parameter if you aren't familiar with ACLs or why you would need to change them, because misusing it could negatively impact system security.</p>\
                            <p>For this parameter to have an effect the file must be located on a partition that supports ACLs (such as NTFS), and the current user must be able to change the permissions on the file. In the event these conditions are not met, no error message will be displayed, and the permissions will not be set.</p>\
                            <p>This parameter should <i>only</i> be used on files private to your application. Never change the ACLs on shared system files, otherwise you can open up security holes on your users' systems.</p>\
                            <p>The specified permissions are set regardless of whether the file existed prior to installation.</p>\
                            <p>This parameter can include one or more space separated values in the format:</p>\
                            <div class="indent"><p><tt><a href="topic_usergroupids.htm">&lt;user or group identifier&gt;</a>-&lt;access type&gt;</tt></p></div>\
                            <p>The following access types are supported for the [Files] section:</p>\
                            <dl>\
                            <dt class="flaglist"><a name="full">full</a></dt>\
                            <dd>\
                            <p>Grants "Full Control" permission, which is the same as <tt>modify</tt> (see below), but additionally allows the specified user/group to take ownership of the file and change its permissions. Use sparingly; generally, <tt>modify</tt> is sufficient.</p>\
                            </dd>\
                            <dt class="flaglist"><a name="modify">modify</a></dt>\
                            <dd>\
                            <p>Grants "Modify" permission, which allows the specified user/group to read, execute, modify, and delete the file.</p>\
                            </dd>\
                            <dt class="flaglist"><a name="readexec">readexec</a></dt>\
                            <dd>\
                            <p>Grants "Read &amp; Execute" permission, which allows the specified user/group to read and execute the file.</p>\
                            </dd>\
                            </dl>\
                            <div class="examplebox">\
                            <div class="exampleheader">Example:</div>\
                            <pre class="nomargin">Permissions: users-modify</pre>\
                            </div>
property.files.font_install=<p>Tells Setup the file is a font that needs to be installed. The value of this parameter is the name of the font as stored in the registry or WIN.INI. This must be exactly the same name as you see when you double-click the font file in Explorer. Note that Setup will automatically append " (TrueType)" to the end of the name.</p>\
                             <p>If the file is not a TrueType font, you must specify the flag <tt>fontisnttruetype</tt> in the Flags parameter.</p>\
                             <p>It's recommended that you use the flags <tt>onlyifdoesntexist</tt> and <tt>uninsneveruninstall</tt> when installing fonts to the {fonts} directory.</p>\
                             <p>To successfully install a font, the user must be a member of the Power Users or Administrators groups.</p>\
                             <p>For compatibility with 64-bit Windows, fonts should not be installed to the <tt>{sys}</tt> directory. Use <tt>{fonts}</tt> as the destination directory instead.</p>\
                             <div class="examplebox">\
                             <div class="exampleheader">Example:</div>\
                             <pre class="nomargin">Source: "OZHANDIN.TTF"; DestDir: "{fonts}"; FontInstall: "Oz Handicraft BT"; Flags: onlyifdoesntexist uninsneveruninstall</pre>\
                             </div>
property.files.strong_assembly_name=<p>Specifies the strong assembly name of the file. Used by Uninstall only.</p>\
                                     <p>This parameter is ignored if the <tt>gacinstall</tt> flag isn't also specified.</p>\
                                     <div class="examplebox">\
                                     <div class="exampleheader">Example:</div>\
                                     <pre class="nomargin">StrongAssemblyName: "MyAssemblyName, Version=1.0.0.0, Culture=neutral, PublicKeyToken=abcdef123456, ProcessorArchitecture=MSIL"</pre>\
                                     </div>
property.files.flags=This parameter is a set of extra options. Multiple options may be used by separating them by spaces.