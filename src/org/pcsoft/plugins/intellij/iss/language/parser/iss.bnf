{
    parserClass="org.pcsoft.plugins.intellij.iss.language.parser.IssParser"
    parserUtilClass="org.pcsoft.plugins.intellij.iss.language.parser.IssParserUtil"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Iss"
    psiImplClassSuffix="Impl"
    psiPackage="org.pcsoft.plugins.intellij.iss.language.parser.psi.element"
    psiImplPackage="org.pcsoft.plugins.intellij.iss.language.parser.psi.element"

    elementTypeHolderClass="org.pcsoft.plugins.intellij.iss.language.parser.IssGenTypes"
    elementTypeClass="org.pcsoft.plugins.intellij.iss.language.parser.psi.IssElementType"
    tokenTypeClass="org.pcsoft.plugins.intellij.iss.language.parser.psi.IssTokenType"

    psiImplUtilClass="org.pcsoft.plugins.intellij.iss.language.parser.psi.IssPsiUtils"
}

issFile ::= section*

/* Sections */
section ::= sectionTitle sectionContent
{
    methods=[getPresentation getName getSectionType]
}
sectionTitle ::= '[' NAME? ']' EOL
{
    methods=[getName getSectionType]
}
private sectionContent ::= ((defaultSectionLine | multipleSectionLine)+ | CODE)?

defaultSectionLine ::= defaultProperty EOL
{
    methods=[getPresentation getSection]
    implements="org.pcsoft.plugins.intellij.iss.language.parser.psi.element.IssSectionLine"
}
multipleSectionLine ::= (multipleProperty ';')* multipleProperty? EOL
{
    methods=[getPresentation getSection]
    implements="org.pcsoft.plugins.intellij.iss.language.parser.psi.element.IssSectionLine"
}

/* Elements */
defaultProperty ::= defaultKey '=' defaultValue
{
    methods=[getName getKey getPropertyType getValue getSection]
    implements="org.pcsoft.plugins.intellij.iss.language.parser.psi.element.IssProperty"
}
multipleProperty::= multipleKey ':' multipleValue?
{
    methods=[getName getKey getPropertyType getValue getSection]
    implements="org.pcsoft.plugins.intellij.iss.language.parser.psi.element.IssProperty"
}

defaultKey ::= (NAME '.')* NAME
{
    methods=[getSection getName getPropertyType]
    implements="org.pcsoft.plugins.intellij.iss.language.parser.psi.element.IssKey"
}
multipleKey ::= NAME
{
    methods=[getSection getName getPropertyType]
    implements="org.pcsoft.plugins.intellij.iss.language.parser.psi.element.IssKey"
}
defaultValue ::= (constValue | NUMBER | VERSION | byteArrayValue | NAME | TEXT)*
{
    methods=[getSection getProperty]
    implements="org.pcsoft.plugins.intellij.iss.language.parser.psi.element.IssValue"
}
multipleValue ::= (refValue+ | NUMBER | VERSION | byteArrayValue | stringValue | constValue)
{
    methods=[getSection getProperty]
    implements="org.pcsoft.plugins.intellij.iss.language.parser.psi.element.IssValue"
}

/* Types */
refValue ::= NAME
stringValue ::= '"' (constValue | refValue | STRING)* '"'
{
    methods=[getValue]
}
constValue ::= '{' (constName (':' constArgumentList ('|' constDefault)? )? )? '}'
{
    methods=[getName getConstantType]
}
byteArrayValue ::= (HEX_BYTE ' ')* HEX_BYTE

/* Sub Types */
private constArgumentList ::= (constArgument ',')* constArgument
constName ::= NAME
constArgument ::= (constValue | NAME | TEXT)
constDefault ::= (constValue | NAME | TEXT)
